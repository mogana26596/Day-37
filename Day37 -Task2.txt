1. Find all the information about each products
db.task.find({});

2. Find the product price which are between 400 to 800
db.task.find({product_price:{$gt:400, $lt:800}});

3. Find the product price which are not between 400 to 600
db.task.find({ $or : [ { product_price: {$lte: 30} }, {product_price: {$gte: 50} } ] } );

4. List the four product which are grater than 500 in price 
db.task.find({product_price:{$gt:500}}).limit(4);

5. Find the product name and product material of each products
db.task.find({}, {"product_name":1, "product_material":1,_id:1});

6. Find the product with a row id of 10
db.task.find ({"id": "10"});

7. Find only the product name and product material
db.task.find({}, {"product_name":1, "product_material":1, _id:0});

8. Find all products which contain the value of soft in product material 
db.task.find ({"product_material": "Soft"});

9. Find products which contain product color indigo  and product price 492.00
db.task.find ({$and: [{"product_color": "indigo"}, {"product_price": 492.00}]});

10. Delete the products which product price value are same

var duplicates = [];

db.task.aggregate([
  { $match: { 
    product_price: { "$ne": '' }  // discard selection criteria
  }},
  { $group: { 
    _id: { product_price: "$product_price"}, // can be grouped on multiple properties 
    dups: { "$addToSet": "$_id" }, 
    count: { "$sum": 1 } 
  }},
  { $match: { 
    count: { "$gt": 1 }    // Duplicates considered as count greater than one
  }}
],
{allowDiskUse: true}       // For faster processing if set is larger
)               // You can display result until this and check duplicates 
.forEach(function(doc) {
    doc.dups.shift();      // First element skipped for deleting
    doc.dups.forEach( function(dupId){ 
        duplicates.push(dupId);   // Getting all duplicate ids
        }
    )
})

// Remove all duplicates in one go    
db.task.remove({_id:{$in:duplicates}})  